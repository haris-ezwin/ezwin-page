---
import Container from "@components/container.astro";
import Layout from "@layouts/Layout.astro";

const terms = [
  {
    name: "Term 1",
    videos: [
      {
        id: "video1",
        title: "Adding & Subtracting Fractions",
        youtubeId: "SPl_mMrKieQ", // Replace with actual YouTube video ID
      },
      {
        id: "video2",
        title: "Improper Fractions & Mixed Numbers",
        youtubeId: "BLyul_CQiWI", // Replace with actual YouTube video ID
      },
      {
        id: "video3",
        title: "Multiplying Between 2 Numbers",
        youtubeId: "i4OLs-wyPJU", // Replace with actual YouTube video ID
      },
    ],
  },
  {
    name: "Term 2",
    videos: [
      {
        id: "video3",
        title: "Decimals",
        youtubeId: "ghi789", // Replace with actual YouTube video ID
      },
    ],
  },
  {
    name: "Term 3",
    videos: [
      {
        id: "video4",
        title: "Angles",
        youtubeId: "jkl101", // Replace with actual YouTube video ID
      },
    ],
  },
  {
    name: "Term 4",
    videos: [
      {
        id: "video5",
        title: "Area and Perimeter",
        youtubeId: "mno112", // Replace with actual YouTube video ID
      },
    ],
  },
];

// Flatten all videos for selection purposes
const allVideos = terms.flatMap((term) => term.videos);

// Get the selected video ID from URL params, default to first video
const selectedVideoId =
  Astro.url.searchParams.get("video") || allVideos[0].youtubeId;

// Get the current term from URL params or default to first term
const currentTermParam = Astro.url.searchParams.get("term");
// Initialize with all terms collapsed except the one containing the selected video
const expandedTerms = terms.reduce((acc, term, index) => {
  // Check if this term contains the selected video
  const containsSelectedVideo = term.videos.some(
    (video) => video.youtubeId === selectedVideoId,
  );
  // If no term is specified in URL, expand the term containing the selected video
  // Otherwise, expand only the term specified in the URL
  acc[index] = currentTermParam
    ? currentTermParam === index.toString()
    : containsSelectedVideo;
  return acc;
}, {});
---

<Layout title="Primary 4 Mathematics">
  <Container>
    <div class="py-8">
      <div class="grid grid-cols-12 gap-8">
        {/* Left Side - Video List */}
        <div class="col-span-12 lg:col-span-4">
          <div class="bg-white rounded-lg shadow-sm">
            <div class="p-4">
              <h2 class="text-xl font-semibold mb-4">P4 Math Video Lessons</h2>
              <div class="space-y-6">
                {
                  terms.map((term, termIndex) => (
                    <div>
                      <button
                        class="w-full flex justify-between items-center font-bold text-primary mb-2 hover:text-primary/80 transition-colors"
                        data-term-index={termIndex}
                        aria-expanded={expandedTerms[termIndex]}
                        aria-controls={`term-content-${termIndex}`}>
                        <span>{term.name}</span>
                        <svg
                          class={`w-5 h-5 transform transition-transform ${expandedTerms[termIndex] ? "rotate-180" : ""}`}
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                          xmlns="http://www.w3.org/2000/svg">
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M19 9l-7 7-7-7"
                          />
                        </svg>
                      </button>
                      <div
                        id={`term-content-${termIndex}`}
                        class={`space-y-2 transition-all duration-300 overflow-hidden ${expandedTerms[termIndex] ? "max-h-96" : "max-h-0"}`}>
                        {term.videos.map((video) => (
                          <a
                            href="#"
                            data-video-id={video.youtubeId}
                            class={`video-link block p-3 rounded-lg transition-colors ${
                              selectedVideoId === video.youtubeId
                                ? "bg-primary/10"
                                : "hover:bg-gray-50"
                            }`}>
                            <h4 class="font-medium text-gray-900">
                              {video.title}
                            </h4>
                          </a>
                        ))}
                      </div>
                    </div>
                  ))
                }
              </div>
            </div>
          </div>
        </div>

        {/* Right Side - Video Player */}
        <div class="col-span-12 lg:col-span-8">
          <div class="bg-white rounded-lg shadow-sm">
            <div class="aspect-video">
              <iframe
                id="video-player"
                class="w-full h-full rounded-t-lg"
                src={`https://www.youtube.com/embed/${selectedVideoId}`}
                title="YouTube video player"
                frameborder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowfullscreen></iframe>
            </div>
          </div>
        </div>
      </div>
    </div>
  </Container>
</Layout>

<script>
  // Add client-side interactivity for term collapsing and video selection
  document.addEventListener("DOMContentLoaded", () => {
    // State management for current video
    let currentVideoId =
      new URLSearchParams(window.location.search).get("video") ||
      document
        .querySelector("#video-player")
        ?.getAttribute("src")
        ?.split("/")
        .pop() ||
      "";

    // Handle term expansion/collapse
    const termButtons = document.querySelectorAll("[data-term-index]");
    termButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const termIndex = button.getAttribute("data-term-index");
        const contentElement = document.getElementById(
          `term-content-${termIndex}`,
        );
        const isExpanded = button.getAttribute("aria-expanded") === "true";

        // Toggle the expanded state
        button.setAttribute("aria-expanded", isExpanded ? "false" : "true");

        // Toggle the content visibility
        if (contentElement) {
          if (isExpanded) {
            contentElement.classList.remove("max-h-96");
            contentElement.classList.add("max-h-0");
          } else {
            contentElement.classList.remove("max-h-0");
            contentElement.classList.add("max-h-96");
          }
        }

        // Toggle the arrow rotation
        const arrow = button.querySelector("svg");
        if (arrow) {
          if (isExpanded) {
            arrow.classList.remove("rotate-180");
          } else {
            arrow.classList.add("rotate-180");
          }
        }
      });
    });

    // Handle video selection
    const videoLinks = document.querySelectorAll(".video-link");
    videoLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();

        const videoId = link.getAttribute("data-video-id");
        if (videoId && videoId !== currentVideoId) {
          // Update state
          currentVideoId = videoId;

          // Update video player
          const videoPlayer = document.getElementById("video-player");
          if (videoPlayer) {
            videoPlayer.src = `https://www.youtube.com/embed/${videoId}`;
          }

          // Update URL without page reload
          const url = new URL(window.location);
          url.searchParams.set("video", videoId);
          window.history.pushState({}, "", url);

          // Update active video styling
          videoLinks.forEach((vl) => {
            if (vl.getAttribute("data-video-id") === videoId) {
              vl.classList.add("bg-primary/10");
              vl.classList.remove("hover:bg-gray-50");
            } else {
              vl.classList.remove("bg-primary/10");
              vl.classList.add("hover:bg-gray-50");
            }
          });
        }
      });
    });
  });
</script>
