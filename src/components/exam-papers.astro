---
import { getExamPapers } from "@utils/supabase.js";

interface ExamPaper {
  title: string;
  description: string;
  imageUrl: string;
  downloadUrl: string;
  videoExplanationUrl: string;
  level: string;
  type: string;
  school: string;
  year: string;
  subject: string;
  worksheetUrl: string;
  difficulty: number;
}

// Fetch exam papers from Supabase
let examPapersData: ExamPaper[] = await getExamPapers();

// Fallback to static data if Supabase fails
if (!examPapersData || examPapersData.length === 0) {
  console.log("Falling back to static exam papers data");
  const staticData = await import("@utils/exam-paper.js");
  // Transform static data to match interface
  examPapersData = staticData.default.map((paper: any) => ({
    title: paper.title,
    description: "",
    imageUrl: "",
    downloadUrl: paper.downloadUrl || "",
    videoExplanationUrl: paper.videoExplanationUrl || "",
    level: paper.level || "",
    type: paper.type || "",
    school: paper.school || "",
    year: paper.year || "",
    subject: paper.subject || "Mathematics",
    worksheetUrl: paper.worksheetUrl || "",
    difficulty: paper.difficulty || 3
  }));
}

// Function to get difficulty color based on rating
function getDifficultyColor(rating: number): string {
  if (rating <= 2) return 'bg-green-100 text-green-700';
  if (rating <= 3) return 'bg-yellow-100 text-yellow-700';
  return 'bg-red-100 text-red-700';
}

// Function to get difficulty text based on rating
function getDifficultyText(rating: number): string {
  if (rating <= 2) return 'Easy';
  if (rating <= 3) return 'Medium';
  return 'Difficult';
}

// Group exam papers by level (Primary 5 first, then Primary 4)
const groupedPapers = examPapersData.reduce((acc, paper) => {
  const level = paper.level;
  if (!acc[level]) {
    acc[level] = [];
  }
  acc[level].push(paper);
  return acc;
}, {} as Record<string, ExamPaper[]>);

// Sort levels to put Primary 5 first
const sortedLevels = Object.keys(groupedPapers).sort((a, b) => {
  if (a.includes('5') && b.includes('4')) return -1;
  if (a.includes('4') && b.includes('5')) return 1;
  return a.localeCompare(b);
});

// Get all unique values for filters
const levels = Array.from(
  new Set(examPapersData.map((paper) => paper.level)),
).sort();
const types = Array.from(
  new Set(examPapersData.map((paper) => paper.type)),
).sort();
---

<div class="max-w-6xl mx-auto px-2 py-2">
  <!-- Filters Section -->
  <div class="mb-2 bg-white p-2 rounded-lg shadow-sm border border-gray-100">
    <div class="flex flex-col md:flex-row md:items-center gap-2">
      <!-- Level Filter -->
      <div class="flex-1">
        <h3 class="text-xs font-medium text-gray-700 mb-1">Level</h3>
        <div class="flex flex-wrap gap-1">
          <button
            class="px-2 py-1 rounded border border-gray-200 text-xs font-medium text-gray-700 hover:border-primary hover:text-primary focus:outline-none focus:ring-1 focus:ring-primary"
            data-filter="level"
            data-value="">
            All Levels
          </button>
          {
            levels.map((level) => (
              <button
                class="px-2 py-1 rounded border border-gray-200 text-xs font-medium text-gray-700 hover:border-primary hover:text-primary focus:outline-none focus:ring-1 focus:ring-primary"
                data-filter="level"
                data-value={level}>
                {level}
              </button>
            ))
          }
        </div>
      </div>

      <!-- Type Filter -->
      <div class="flex-1">
        <h3 class="text-xs font-medium text-gray-700 mb-1">Exam Type</h3>
        <div class="flex flex-wrap gap-1">
          <button
            class="px-2 py-1 rounded border border-gray-200 text-xs font-medium text-gray-700 hover:border-primary hover:text-primary focus:outline-none focus:ring-1 focus:ring-primary"
            data-filter="type"
            data-value="">
            All Types
          </button>
          {
            types.map((type) => (
              <button
                class="px-2 py-1 rounded border border-gray-200 text-xs font-medium text-gray-700 hover:border-primary hover:text-primary focus:outline-none focus:ring-1 focus:ring-primary"
                data-filter="type"
                data-value={type}>
                {type}
              </button>
            ))
          }
        </div>
      </div>
    </div>
  </div>

  <!-- Exam Papers List -->
  <div
    class="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden">
    {
      examPapersData.length === 0 ? (
        <div class="p-4 text-center">
          <p class="text-gray-500 text-sm">
            No exam papers available at the moment.
          </p>
        </div>
      ) : (
        <div>
          {sortedLevels.map((level) => (
            <div class="border-b border-gray-100 last:border-b-0">
              <!-- Level Header -->
              <div class="bg-gray-50 px-2 py-1 border-b border-gray-100">
                <h2 class="text-sm font-semibold text-gray-900">{level}</h2>
              </div>
              
              <!-- Papers for this level -->
              <div class="divide-y divide-gray-100">
                {groupedPapers[level].map((paper) => {
                  const difficultyColor = getDifficultyColor(paper.difficulty);
                  return (
                    <div
                      class="p-2 hover:bg-gray-50 transition-colors duration-200"
                      data-level={paper.level}
                      data-type={paper.type}>
                      <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-2">
                        <div class="flex-1">
                          <div class="flex items-center gap-2">
                            <h3 class="text-sm font-semibold text-gray-900">
                              {paper.title}
                            </h3>
                            <div class="flex items-center gap-1">
                              <span class={`inline-flex items-center px-1.5 py-0.5 rounded text-xs font-medium ${difficultyColor}`}>
                                {getDifficultyText(paper.difficulty)}
                              </span>
                              <div class="flex items-center gap-0.5">
                                <span class="text-xs text-gray-600">{paper.difficulty}/5</span>
                                <div class="flex gap-0.5">
                                  {[1, 2, 3, 4, 5].map((star) => (
                                    <div class={`w-2 h-2 rounded-full ${
                                      star <= paper.difficulty 
                                        ? 'bg-yellow-400' 
                                        : 'bg-gray-200 border border-gray-300'
                                    }`}></div>
                                  ))}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        <div class="flex flex-col sm:flex-row gap-1">
                          {paper.worksheetUrl ? (
                            <a
                              href={paper.worksheetUrl}
                              target="_blank"
                              rel="noopener noreferrer"
                              class="inline-flex items-center justify-center rounded bg-primary px-2 py-1 text-xs font-semibold text-white shadow-sm hover:bg-primary/90 focus-visible:outline focus-visible:outline-1 focus-visible:outline-offset-1 focus-visible:outline-primary">
                              <svg
                                class="w-3 h-3 mr-1"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24">
                                <path
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                                />
                              </svg>
                              Try Online
                            </a>
                          ) : (
                            <div class="relative">
                              <span class="absolute -top-3 left-0 text-xs text-gray-500 italic">
                                Coming Soon
                              </span>
                              <button
                                disabled
                                class="inline-flex items-center justify-center rounded bg-gray-300 px-2 py-1 text-xs font-semibold text-gray-400 cursor-not-allowed">
                                <svg
                                  class="w-3 h-3 mr-1"
                                  fill="none"
                                  stroke="currentColor"
                                  viewBox="0 0 24 24">
                                  <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                                  />
                                </svg>
                                Try Online
                              </button>
                            </div>
                          )}
                          <a
                            href={paper.downloadUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                            class="inline-flex items-center justify-center rounded border border-primary px-2 py-1 text-xs font-semibold text-primary hover:bg-primary/10 focus-visible:outline focus-visible:outline-1 focus-visible:outline-offset-1 focus-visible:outline-primary">
                            <svg
                              class="w-3 h-3 mr-1"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24">
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
                              />
                            </svg>
                            Download
                          </a>
                          {paper.videoExplanationUrl ? (
                            <a
                              href={paper.videoExplanationUrl}
                              target="_blank"
                              rel="noopener noreferrer"
                              class="inline-flex items-center justify-center rounded border border-primary px-2 py-1 text-xs font-semibold text-primary hover:bg-primary/10 focus-visible:outline focus-visible:outline-1 focus-visible:outline-offset-1 focus-visible:outline-primary">
                              <svg
                                class="w-3 h-3 mr-1"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24">
                                <path
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"
                                />
                              </svg>
                              Watch
                            </a>
                          ) : (
                            <div class="relative">
                              <span class="absolute -top-3 left-0 text-xs text-gray-500 italic">
                                Coming Soon
                              </span>
                              <button
                                disabled
                                class="inline-flex items-center justify-center rounded border border-gray-300 px-2 py-1 text-xs font-semibold text-gray-400 cursor-not-allowed">
                                <svg
                                  class="w-3 h-3 mr-1"
                                  fill="none"
                                  stroke="currentColor"
                                  viewBox="0 0 24 24">
                                  <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"
                                  />
                                </svg>
                                Watch
                              </button>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          ))}
        </div>
      )
    }
  </div>
</div>

<script>
  // State management
  const state = {
    level: "",
    type: "",
  };

  // Get all exam paper cards
  const examPapers = document.querySelectorAll<HTMLElement>("[data-level]");

  // Filter function
  function filterPapers() {
    examPapers.forEach((paper) => {
      const matchesLevel = !state.level || paper.dataset.level === state.level;
      const matchesType = !state.type || paper.dataset.type === state.type;

      if (matchesLevel && matchesType) {
        paper.style.display = "block";
      } else {
        paper.style.display = "none";
      }
    });
  }

  // Add event listeners to all filter buttons
  document
    .querySelectorAll<HTMLButtonElement>("[data-filter]")
    .forEach((button) => {
      button.addEventListener("click", (e) => {
        const target = e.target as HTMLButtonElement;
        if (!target) return;

        const filterType = target.dataset.filter;
        const filterValue = target.dataset.value;
        if (!filterType) return;

        // Update active state
        document
          .querySelectorAll(`[data-filter="${filterType}"]`)
          .forEach((btn) => {
            btn.classList.remove("border-primary", "text-primary");
            btn.classList.add("border-gray-200", "text-gray-700");
          });
        target.classList.remove("border-gray-200", "text-gray-700");
        target.classList.add("border-primary", "text-primary");

        state[filterType] = filterValue || "";
        filterPapers();
      });
    });

  // Initial filter
  filterPapers();
</script>
